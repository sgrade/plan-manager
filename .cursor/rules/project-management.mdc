---
alwaysApply: false
---
# Project management rules

## Purpose & application

Code changes are allowed in the following cases:
1. Aligned with the plan documented via Plan Manager MCP server
2. Deviations are discussed, reflected in the plan, and approved
3. Explicit user request to perform a task outside Plan Manager

## Work items and statuses
- Plan: documents major change; maps to MAJOR in semantic versioning; a collection of stories.
- Story: documents a user-facing outcome (the **WHAT** and **WHY**). It is a collection of tasks. It maps to a MINOR in semantic versioning.
- Task: documents the implementation steps for the AI agent (the **HOW**). Each task is a discreet unit of work that maps to a PATCH in semantic versioning. While a story provides the high-level context, each task also has its own "what, why, how" at a more granular level.
- Statuses: apply to plans, stories, and tasks; primary progression is TODO → IN_PROGRESS → PENDING_REVIEW → DONE; side states: BLOCKED, DEFERRED.
- Dependencies: tasks/stories may block others.
- Priority: 0–5 (0 is highest).

## Development workflow
1. Planning:
   - The user can select an existing work item (Plan or Story) to review, or create a new one using the `list_*` and `set_current_*` commands.
   - **Decomposing Work (Creating Children)**: After setting a parent item (like a Story), the user can create child items (like Tasks) in two ways:
     - **Manual Creation**: The user runs the `create_task` command for each new task. Each creation is considered a proposal that is implicitly approved.
     - **Assisted Creation**: The user can run a `/create_tasks` prompt. The system will suggest a list of tasks. These are only proposals. The user must then review the list and give an explicit command to the agent to create the desired tasks. This command serves as the approval. (Note: The agent is responsible for iterating through approved proposals and calling the `create_*` tool for each; there is no single "bulk create" tool.)
   - **Approval Mechanism**:
     - For **Plans and Stories**, approval is conversational. The act of creating them, either manually or from an approved proposal list, confirms their addition to the backlog.
     - For **Tasks**, creation places them in the `TODO` state. This means they are "approved for the backlog." A separate, formal approval (`approve_task` command) is required later to start work and move them to `IN_PROGRESS`.
2. Execution (per-task): This follows a standard Pull Request (PR) workflow.
   - **Task Steps (Pre-Execution Review)**: Before starting a task, the agent must propose the `steps` it will take. This is equivalent to a PR description. The user must `approve` this before work begins.
   - **Implementation**: Upon approval, a task's status is set to `IN_PROGRESS` and the agent begins work.
   - **Code Review (Post-Execution Review)**: After completing the work, the agent submits the code for review, and the task's status is set to `PENDING_REVIEW`. The agent provides a summary of changes, similar to a changelog entry. The user reviews the changes.
     - If the user responds with `approve`, the work is merged and the task is marked as `DONE`.
     - If the user responds with `change`, the task's status is moved back to `IN_PROGRESS`, allowing the agent to make corrections and re-submit for review. This cycle repeats until the work is approved.
     - This review step is mandatory.
   - **Fast-Track (Optional)**: For simple or trusted tasks, the user can choose to skip the pre-execution review. See the `approve [item_index]` command.

## Commands (chat → actions)
- list_*, create_*, update_*, delete_* set_current_* 
  - for any work item, e.g. list_tasks
- prepare
  - Instructs the agent to generate the `steps` for the currently active task.
- approve [item_index]
  - Applies contextually. If `item_index` is omitted, it applies to the current item under review.
    - **Story Review**: Accepts the overall proposal.
    - **Fast-Track**: If an `item_index` is provided for a task in the `TODO` state, it bypasses the steps review and moves the task directly to `IN_PROGRESS`.
    - **Steps Review**: Approves the task's `steps`, authorizing the agent to begin implementation.
    - **Code Review**: Accepts and merges the code changes, marking the task as `DONE`.
- get_current
  - Provides a simple, unambiguous overview of the current context (plan, story, and task IDs).
- report
  - Provides a dynamic, user-friendly report on the current work item, including its status, a summary of its progress, and suggested next actions.
- change [instructions]
  - Used to edit the current or named item(s) by index or title. The agent can edit titles, descriptions, priorities, dependencies, and add/remove tasks.
  - If instructions are not provided, the agent will ask what should be changed.
  - After applying edits, the agent will print an updated summary for review.
