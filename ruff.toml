# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[lint]
# Enable comprehensive rule sets for professional code quality
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit (security)
    "BLE",    # flake8-blind-except
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented-out code)
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt (string formatting)
    "PERF",   # Perflint
    "RUF",    # Ruff-specific rules
]

ignore = [
    "COM812",  # Missing trailing comma (conflicts with formatter)
    "ISC001",  # Single-line implicit string concatenation (conflicts with formatter)
    "E501",    # Line too long (86 remaining in prompts/docstrings; fix before 1.0)
    "S101",    # Use of assert (allowed in tests)
    "S311",    # random.random() is fine for non-cryptographic sampling
    "PLR0913", # Too many arguments
    "TRY003",  # Avoid specifying long messages outside exception class
    "S603",    # subprocess without shell=True is fine
    "S607",    # Starting a process with a partial path
    # Complexity rules - acceptable for clear, well-tested business logic
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    # Code style preferences - intentional patterns
    "TRY300",  # Consider moving statement to else block
    "TRY301",  # Abstract raise to inner function
    # Magic values - business logic constants documented in code
    "PLR2004", # Magic value in comparison
    # Circular import breaks - documented and necessary
    "PLC0415", # Import should be at top level (lazy imports for circular deps)
]

[lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # assert allowed in tests
    "PLR2004", # magic values allowed in tests
    "ARG",     # unused arguments allowed in fixtures
    "INP001",  # tests don't need __init__.py
    "N806",    # variable naming rules relaxed for tests
    "PT011",   # pytest.raises can be broad in tests
    "PT012",   # pytest.raises can have multiple statements in tests
    "S307",    # eval allowed in tests for parsing telemetry logs
    "SIM117",  # nested with statements ok in tests for clarity
    "RUF043",  # regex patterns in match= don't need escaping in tests
    "PLW0602", # global statement allowed in pytest hooks
    "PLW0603", # global statement allowed in pytest hooks
    "PTH110",  # os.path allowed in test conftest for compatibility
]
"**/__init__.py" = [
    "F401",    # unused imports allowed in __init__.py
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
# Removed: dummy-variable-rgx is deprecated in ruff 0.14+

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
