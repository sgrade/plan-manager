[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "plan-manager"
version = "0.7.0"
description = "AI-assisted planning (project management) with MCP interface"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "sgrade"}
]
keywords = ["planning", "project-management", "ai", "mcp", "model-context-protocol"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.13"
dependencies = [
    "PyYAML>=6.0",        # YAML file parsing for plan data
    "mcp[cli]>=1.17.0",   # MCP SDK for server functionality
    "starlette",          # ASGI framework used by FastMCP
    "uvicorn[standard]",  # ASGI server for running the MCP server
    "pydantic>=2.0",      # Schema validation for story and Plan models
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "pytest-cov>=4.1",
    "pytest-asyncio>=0.23",
    "mypy>=1.8",
    "ruff>=0.3",
    "bandit>=1.7",
    "pre-commit>=3.6",
    "twine>=5.0",
    "types-PyYAML>=6.0",
]

[project.urls]
Homepage = "https://github.com/sgrade/plan-manager"
Repository = "https://github.com/sgrade/plan-manager"
Issues = "https://github.com/sgrade/plan-manager/issues"

[project.scripts]
pm = "plan_manager.__main__:main"

[tool.uv]
link-mode = "copy"

[tool.hatch.build.targets.wheel]
packages = ["src/plan_manager"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
markers = [
    "integration: integration tests (may touch filesystem or run end-to-end)",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/plan_manager"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Mypy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
disallow_subclassing_any = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = "mcp.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "starlette.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "uvicorn.*"
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv"]
skips = ["B101"]  # assert_used - we use asserts in tests
